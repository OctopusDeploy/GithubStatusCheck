step "Deploy an Azure App Service" {
    properties = {
        Octopus.Action.TargetRoles = "GithubStatusChecksApp"
    }

    action {
        action_type = "Octopus.AzureAppService"
        properties = {
            Octopus.Action.Azure.DeploymentSlot = "Production"
            Octopus.Action.Azure.DeploymentType = "Package"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "CommitStatusRulesWebApp"
            Octopus.Action.RunOnServer = "true"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "CommitStatusRulesWebApp"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Create Infrastructure" {

    action {
        action_type = "Octopus.TerraformApply"
        properties = {
            Octopus.Action.AzureAccount.Variable = "AzureAccount"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "Octopus.GithubStatusCheck.Terraform"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Package"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "True"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "None"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        container {
            feed = "docker.io"
            image = "octopusdeploy/worker-tools:3.0.0-ubuntu.18.04"
        }

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "Octopus.GithubStatusCheck.Terraform"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Create Targets in Octopus" {

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                New-OctopusAzureWebAppTarget -name "Github Status Check - #{Environment}" `
                                             -azureWebApp "github-status-check-#{Environment | ToLower}" `
                                             -azureResourceGroupName  $ResourceGroupName `
                                             -octopusAccountIdOrName $AzureAccount `
                                             -octopusRoles CrowsNest-Web `
                							 -octopusDefaultWorkerPoolIdOrName $WorkerPoolForNewTargets `
                                             -updateIfExisting
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "Hosted Ubuntu"
    }
}